
Shell_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00800060  00002cb6  00002d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800274  00800274  00002f5e  2**0
                  ALLOC
  3 .stab         00002cac  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000190f  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000751b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000076db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000078ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c6dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 14 	call	0x2894	; 0x2894 <main>
      8a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e5       	ldi	r26, 0x5E	; 94
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e5       	ldi	r24, 0x5E	; 94
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e5       	ldi	r22, 0x5E	; 94
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ea 59       	subi	r30, 0x9A	; 154
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <PWM_Timer0_Start>:
#include<avr/io.h>
#include"PWM.h"


void PWM_Timer0_Start(uint8 duty_cycle){
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01


	TCNT0 = 0; //Set Timer Initial value
     efa:	e2 e5       	ldi	r30, 0x52	; 82
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	10 82       	st	Z, r1

	OCR0  = duty_cycle*(2.55) ;   // Set Compare Value 255max
     f00:	0c e5       	ldi	r16, 0x5C	; 92
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	aa 27       	eor	r26, r26
     f0c:	97 fd       	sbrc	r25, 7
     f0e:	a0 95       	com	r26
     f10:	ba 2f       	mov	r27, r26
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	23 e3       	ldi	r18, 0x33	; 51
     f24:	33 e3       	ldi	r19, 0x33	; 51
     f26:	43 e2       	ldi	r20, 0x23	; 35
     f28:	50 e4       	ldi	r21, 0x40	; 64
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	f8 01       	movw	r30, r16
     f40:	80 83       	st	Z, r24

	SET_BIT(DDRB,PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     f42:	a7 e3       	ldi	r26, 0x37	; 55
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e7 e3       	ldi	r30, 0x37	; 55
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 60       	ori	r24, 0x08	; 8
     f4e:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     f50:	e3 e5       	ldi	r30, 0x53	; 83
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	8a e6       	ldi	r24, 0x6A	; 106
     f56:	80 83       	st	Z, r24

}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <PWM_Timer2_Start>:

void PWM_Timer2_Start(uint8 duty_cycle){
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01

	TCNT2 = 0; //Set Timer Initial value
     f74:	e4 e4       	ldi	r30, 0x44	; 68
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	10 82       	st	Z, r1

	OCR2=((float)duty_cycle / 180.0) * 255;              //duty_cycle*(1.8) ;   // Set Compare Value 255max
     f7a:	03 e4       	ldi	r16, 0x43	; 67
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	44 e3       	ldi	r20, 0x34	; 52
     f9e:	53 e4       	ldi	r21, 0x43	; 67
     fa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	53 e4       	ldi	r21, 0x43	; 67
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24

	SET_BIT(DDRB,PD7);
     fcc:	a7 e3       	ldi	r26, 0x37	; 55
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e7 e3       	ldi	r30, 0x37	; 55
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24

	TCCR2= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<CS21);
     fda:	e5 e4       	ldi	r30, 0x45	; 69
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8a e6       	ldi	r24, 0x6A	; 106
     fe0:	80 83       	st	Z, r24
}
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <GPIO_setupPinDirection+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <GPIO_setupPinDirection+0x8>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	6a 83       	std	Y+2, r22	; 0x02
    1000:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_setupPinDirection+0x1c>
    1008:	d5 c0       	rjmp	.+426    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	84 30       	cpi	r24, 0x04	; 4
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_setupPinDirection+0x24>
    1010:	d1 c0       	rjmp	.+418    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <GPIO_setupPinDirection+0x3a>
    1026:	43 c0       	rjmp	.+134    	; 0x10ae <GPIO_setupPinDirection+0xc0>
    1028:	2c 81       	ldd	r18, Y+4	; 0x04
    102a:	3d 81       	ldd	r19, Y+5	; 0x05
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	2c f4       	brge	.+10     	; 0x103c <GPIO_setupPinDirection+0x4e>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	71 f0       	breq	.+28     	; 0x1056 <GPIO_setupPinDirection+0x68>
    103a:	bc c0       	rjmp	.+376    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_setupPinDirection+0x5a>
    1046:	5f c0       	rjmp	.+190    	; 0x1106 <GPIO_setupPinDirection+0x118>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <GPIO_setupPinDirection+0x66>
    1052:	85 c0       	rjmp	.+266    	; 0x115e <GPIO_setupPinDirection+0x170>
    1054:	af c0       	rjmp	.+350    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	a1 f4       	brne	.+40     	; 0x1084 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    105c:	aa e3       	ldi	r26, 0x3A	; 58
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ea e3       	ldi	r30, 0x3A	; 58
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_setupPinDirection+0x8c>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_setupPinDirection+0x88>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	98 c0       	rjmp	.+304    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_setupPinDirection+0xb4>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_setupPinDirection+0xb0>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	83 c0       	rjmp	.+262    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10b4:	a7 e3       	ldi	r26, 0x37	; 55
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0xe4>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0xe0>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	6c c0       	rjmp	.+216    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10dc:	a7 e3       	ldi	r26, 0x37	; 55
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e7 e3       	ldi	r30, 0x37	; 55
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_setupPinDirection+0x10c>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_setupPinDirection+0x108>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	57 c0       	rjmp	.+174    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0x13c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0x138>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	40 c0       	rjmp	.+128    	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1134:	a4 e3       	ldi	r26, 0x34	; 52
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e3       	ldi	r30, 0x34	; 52
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x164>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x160>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	2b c0       	rjmp	.+86     	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x194>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x190>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	14 c0       	rjmp	.+40     	; 0x11b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x1bc>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x1b8>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <GPIO_writePin+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_writePin+0x8>
    11cc:	0f 92       	push	r0
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02
    11d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <GPIO_writePin+0x1c>
    11de:	d5 c0       	rjmp	.+426    	; 0x138a <GPIO_writePin+0x1c6>
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <GPIO_writePin+0x24>
    11e6:	d1 c0       	rjmp	.+418    	; 0x138a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3d 83       	std	Y+5, r19	; 0x05
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <GPIO_writePin+0x3a>
    11fc:	43 c0       	rjmp	.+134    	; 0x1284 <GPIO_writePin+0xc0>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <GPIO_writePin+0x4e>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	71 f0       	breq	.+28     	; 0x122c <GPIO_writePin+0x68>
    1210:	bc c0       	rjmp	.+376    	; 0x138a <GPIO_writePin+0x1c6>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <GPIO_writePin+0x5a>
    121c:	5f c0       	rjmp	.+190    	; 0x12dc <GPIO_writePin+0x118>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <GPIO_writePin+0x66>
    1228:	85 c0       	rjmp	.+266    	; 0x1334 <GPIO_writePin+0x170>
    122a:	af c0       	rjmp	.+350    	; 0x138a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	a1 f4       	brne	.+40     	; 0x125a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_writePin+0x8c>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_writePin+0x88>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	98 c0       	rjmp	.+304    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    125a:	ab e3       	ldi	r26, 0x3B	; 59
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_writePin+0xb4>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_writePin+0xb0>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	83 c0       	rjmp	.+262    	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	a1 f4       	brne	.+40     	; 0x12b2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0xe4>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0xe0>
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	6c c0       	rjmp	.+216    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12b2:	a8 e3       	ldi	r26, 0x38	; 56
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e8 e3       	ldi	r30, 0x38	; 56
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_writePin+0x10c>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_writePin+0x108>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	57 c0       	rjmp	.+174    	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0x13c>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0x138>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	40 c0       	rjmp	.+128    	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    130a:	a5 e3       	ldi	r26, 0x35	; 53
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x164>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x160>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	2b c0       	rjmp	.+86     	; 0x138a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	a1 f4       	brne	.+40     	; 0x1362 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x194>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x190>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	14 c0       	rjmp	.+40     	; 0x138a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0x1bc>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0x1b8>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_readPin+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <GPIO_readPin+0x8>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13ac:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <GPIO_readPin+0x1c>
    13b4:	84 c0       	rjmp	.+264    	; 0x14be <GPIO_readPin+0x124>
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	08 f0       	brcs	.+2      	; 0x13be <GPIO_readPin+0x24>
    13bc:	80 c0       	rjmp	.+256    	; 0x14be <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3d 83       	std	Y+5, r19	; 0x05
    13c6:	2c 83       	std	Y+4, r18	; 0x04
    13c8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ca:	5d 81       	ldd	r21, Y+5	; 0x05
    13cc:	41 30       	cpi	r20, 0x01	; 1
    13ce:	51 05       	cpc	r21, r1
    13d0:	79 f1       	breq	.+94     	; 0x1430 <GPIO_readPin+0x96>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	34 f4       	brge	.+12     	; 0x13e8 <GPIO_readPin+0x4e>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	69 f0       	breq	.+26     	; 0x1400 <GPIO_readPin+0x66>
    13e6:	6b c0       	rjmp	.+214    	; 0x14be <GPIO_readPin+0x124>
    13e8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ea:	5d 81       	ldd	r21, Y+5	; 0x05
    13ec:	42 30       	cpi	r20, 0x02	; 2
    13ee:	51 05       	cpc	r21, r1
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <GPIO_readPin+0xc6>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <GPIO_readPin+0x64>
    13fc:	49 c0       	rjmp	.+146    	; 0x1490 <GPIO_readPin+0xf6>
    13fe:	5f c0       	rjmp	.+190    	; 0x14be <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1400:	e9 e3       	ldi	r30, 0x39	; 57
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_readPin+0x7e>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_readPin+0x7a>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	88 23       	and	r24, r24
    1424:	19 f0       	breq	.+6      	; 0x142c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	49 c0       	rjmp	.+146    	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	47 c0       	rjmp	.+142    	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1430:	e6 e3       	ldi	r30, 0x36	; 54
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_readPin+0xae>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_readPin+0xaa>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	31 c0       	rjmp	.+98     	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	2f c0       	rjmp	.+94     	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1460:	e3 e3       	ldi	r30, 0x33	; 51
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_readPin+0xde>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_readPin+0xda>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	19 c0       	rjmp	.+50     	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    148c:	19 82       	std	Y+1, r1	; 0x01
    148e:	17 c0       	rjmp	.+46     	; 0x14be <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1490:	e0 e3       	ldi	r30, 0x30	; 48
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_readPin+0x10e>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_readPin+0x10a>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	88 23       	and	r24, r24
    14b4:	19 f0       	breq	.+6      	; 0x14bc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14bc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <GPIO_setupPortDirection+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <GPIO_setupPortDirection+0x8>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	90 f5       	brcc	.+100    	; 0x154a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	d1 f0       	breq	.+52     	; 0x152e <GPIO_setupPortDirection+0x5e>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <GPIO_setupPortDirection+0x3e>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	61 f0       	breq	.+24     	; 0x1524 <GPIO_setupPortDirection+0x54>
    150c:	1e c0       	rjmp	.+60     	; 0x154a <GPIO_setupPortDirection+0x7a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	81 f0       	breq	.+32     	; 0x1538 <GPIO_setupPortDirection+0x68>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <GPIO_setupPortDirection+0x72>
    1522:	13 c0       	rjmp	.+38     	; 0x154a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 83       	st	Z, r24
    152c:	0e c0       	rjmp	.+28     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    152e:	e7 e3       	ldi	r30, 0x37	; 55
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 83       	st	Z, r24
    1536:	09 c0       	rjmp	.+18     	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1538:	e4 e3       	ldi	r30, 0x34	; 52
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 83       	st	Z, r24
    1540:	04 c0       	rjmp	.+8      	; 0x154a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1542:	e1 e3       	ldi	r30, 0x31	; 49
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
			break;
		}
	}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_writePort+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <GPIO_writePort+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	90 f5       	brcc	.+100    	; 0x15d2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3c 83       	std	Y+4, r19	; 0x04
    1576:	2b 83       	std	Y+3, r18	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	d1 f0       	breq	.+52     	; 0x15b6 <GPIO_writePort+0x5e>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <GPIO_writePort+0x3e>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f0       	breq	.+24     	; 0x15ac <GPIO_writePort+0x54>
    1594:	1e c0       	rjmp	.+60     	; 0x15d2 <GPIO_writePort+0x7a>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	81 f0       	breq	.+32     	; 0x15c0 <GPIO_writePort+0x68>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	81 f0       	breq	.+32     	; 0x15ca <GPIO_writePort+0x72>
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    15b4:	0e c0       	rjmp	.+28     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15b6:	e8 e3       	ldi	r30, 0x38	; 56
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_readPort+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_readPort+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15ee:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	90 f5       	brcc	.+100    	; 0x165a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3c 83       	std	Y+4, r19	; 0x04
    15fe:	2b 83       	std	Y+3, r18	; 0x03
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	d1 f0       	breq	.+52     	; 0x163e <GPIO_readPort+0x5e>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <GPIO_readPort+0x3e>
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <GPIO_readPort+0x54>
    161c:	1e c0       	rjmp	.+60     	; 0x165a <GPIO_readPort+0x7a>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	81 f0       	breq	.+32     	; 0x1648 <GPIO_readPort+0x68>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <GPIO_readPort+0x72>
    1632:	13 c0       	rjmp	.+38     	; 0x165a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1634:	e9 e3       	ldi	r30, 0x39	; 57
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	0e c0       	rjmp	.+28     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    163e:	e6 e3       	ldi	r30, 0x36	; 54
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	09 c0       	rjmp	.+18     	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	04 c0       	rjmp	.+8      	; 0x165a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1652:	e0 e3       	ldi	r30, 0x30	; 48
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*FOR COMPARE MODE*/
ISR(TIMER1_COMPA_vect)
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1694:	80 91 74 02 	lds	r24, 0x0274
    1698:	90 91 75 02 	lds	r25, 0x0275
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	29 f0       	breq	.+10     	; 0x16aa <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    16a0:	e0 91 74 02 	lds	r30, 0x0274
    16a4:	f0 91 75 02 	lds	r31, 0x0275
    16a8:	09 95       	icall
	}
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <__vector_9>:


/*FOR OVERFLOW MODE*/
ISR(TIMER1_OVF_vect)
{
    16d0:	1f 92       	push	r1
    16d2:	0f 92       	push	r0
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	0f 92       	push	r0
    16d8:	11 24       	eor	r1, r1
    16da:	2f 93       	push	r18
    16dc:	3f 93       	push	r19
    16de:	4f 93       	push	r20
    16e0:	5f 93       	push	r21
    16e2:	6f 93       	push	r22
    16e4:	7f 93       	push	r23
    16e6:	8f 93       	push	r24
    16e8:	9f 93       	push	r25
    16ea:	af 93       	push	r26
    16ec:	bf 93       	push	r27
    16ee:	ef 93       	push	r30
    16f0:	ff 93       	push	r31
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    16fa:	80 91 74 02 	lds	r24, 0x0274
    16fe:	90 91 75 02 	lds	r25, 0x0275
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1706:	e0 91 74 02 	lds	r30, 0x0274
    170a:	f0 91 75 02 	lds	r31, 0x0275
    170e:	09 95       	icall
	}
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <Timer1_init>:




void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <Timer1_init+0x6>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;
    1744:	ac e4       	ldi	r26, 0x4C	; 76
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e9 81       	ldd	r30, Y+1	; 0x01
    174a:	fa 81       	ldd	r31, Y+2	; 0x02
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    1756:	aa e4       	ldi	r26, 0x4A	; 74
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B); //for NON_PWM mode
    1768:	af e4       	ldi	r26, 0x4F	; 79
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ef e4       	ldi	r30, 0x4F	; 79
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8c 60       	ori	r24, 0x0C	; 12
    1774:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0XF8) |(Config_Ptr->prescaler);
    1776:	ae e4       	ldi	r26, 0x4E	; 78
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ee e4       	ldi	r30, 0x4E	; 78
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	98 2f       	mov	r25, r24
    1782:	98 7f       	andi	r25, 0xF8	; 248
    1784:	e9 81       	ldd	r30, Y+1	; 0x01
    1786:	fa 81       	ldd	r31, Y+2	; 0x02
    1788:	84 81       	ldd	r24, Z+4	; 0x04
    178a:	89 2b       	or	r24, r25
    178c:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B& 0XF7)|(Config_Ptr->mode<<WGM12);
    178e:	ae e4       	ldi	r26, 0x4E	; 78
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ee e4       	ldi	r30, 0x4E	; 78
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	28 2f       	mov	r18, r24
    179a:	27 7f       	andi	r18, 0xF7	; 247
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	85 81       	ldd	r24, Z+5	; 0x05
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	82 2b       	or	r24, r18
    17b4:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE1A) | (1<< TOIE1); ////OCIE1A interrupt enable for a compare Maching.TOIE  OVERFLOW interrupt enable
    17b6:	a9 e5       	ldi	r26, 0x59	; 89
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e9 e5       	ldi	r30, 0x59	; 89
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	84 61       	ori	r24, 0x14	; 20
    17c2:	8c 93       	st	X, r24
	sei(); //SET I-BIT
    17c4:	78 94       	sei
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <Timer1_deInit>:

void Timer1_deInit(void)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0;
    17d8:	ec e4       	ldi	r30, 0x4C	; 76
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	11 82       	std	Z+1, r1	; 0x01
    17de:	10 82       	st	Z, r1
	OCR1A = 0;
    17e0:	ea e4       	ldi	r30, 0x4A	; 74
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	11 82       	std	Z+1, r1	; 0x01
    17e6:	10 82       	st	Z, r1
	TCCR1A =0;
    17e8:	ef e4       	ldi	r30, 0x4F	; 79
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	10 82       	st	Z, r1
	TCCR1B=0;
    17ee:	ee e4       	ldi	r30, 0x4E	; 78
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	10 82       	st	Z, r1
	TIMSK =0;
    17f4:	e9 e5       	ldi	r30, 0x59	; 89
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	10 82       	st	Z, r1
	cli(); //Clear I-BIT
    17fa:	f8 94       	cli


}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <Timer1_setCallBack+0x6>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	90 93 75 02 	sts	0x0275, r25
    1818:	80 93 74 02 	sts	0x0274, r24

}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <UART_init+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <UART_init+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1836:	1a 82       	std	Y+2, r1	; 0x02
    1838:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    183a:	eb e2       	ldi	r30, 0x2B	; 43
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1842:	ea e2       	ldi	r30, 0x2A	; 42
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	88 e1       	ldi	r24, 0x18	; 24
    1848:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==_9_bit){
    184a:	eb 81       	ldd	r30, Y+3	; 0x03
    184c:	fc 81       	ldd	r31, Y+4	; 0x04
    184e:	80 81       	ld	r24, Z
    1850:	87 30       	cpi	r24, 0x07	; 7
    1852:	39 f4       	brne	.+14     	; 0x1862 <UART_init+0x3c>
		UCSRB |=(1<<UCSZ2);
    1854:	aa e2       	ldi	r26, 0x2A	; 42
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ea e2       	ldi	r30, 0x2A	; 42
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	84 60       	ori	r24, 0x04	; 4
    1860:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    1862:	e0 e4       	ldi	r30, 0x40	; 64
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 e8       	ldi	r24, 0x80	; 128
    1868:	80 83       	st	Z, r24
	UCSRC =(UCSRC &0xF9)|(Config_Ptr->bit_data <<1);
    186a:	a0 e4       	ldi	r26, 0x40	; 64
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e0 e4       	ldi	r30, 0x40	; 64
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	29 7f       	andi	r18, 0xF9	; 249
    1878:	eb 81       	ldd	r30, Y+3	; 0x03
    187a:	fc 81       	ldd	r31, Y+4	; 0x04
    187c:	80 81       	ld	r24, Z
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	82 2b       	or	r24, r18
    1888:	8c 93       	st	X, r24
	/*to be sure that the bit USBS  won't be set in 9bit mode  */
	if(Config_Ptr->bit_data==_9_bit){
    188a:	eb 81       	ldd	r30, Y+3	; 0x03
    188c:	fc 81       	ldd	r31, Y+4	; 0x04
    188e:	80 81       	ld	r24, Z
    1890:	87 30       	cpi	r24, 0x07	; 7
    1892:	39 f4       	brne	.+14     	; 0x18a2 <UART_init+0x7c>
		UCSRC =(UCSRC &0xF7);
    1894:	a0 e4       	ldi	r26, 0x40	; 64
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e0 e4       	ldi	r30, 0x40	; 64
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	87 7f       	andi	r24, 0xF7	; 247
    18a0:	8c 93       	st	X, r24
	}

	/*(UCSRC &0xCF(1100 1111)) to save other bits and clear the desired ones */
	UCSRC =(UCSRC &0xCF)|(Config_Ptr->parity <<4);
    18a2:	a0 e4       	ldi	r26, 0x40	; 64
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e0 e4       	ldi	r30, 0x40	; 64
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	2f 7c       	andi	r18, 0xCF	; 207
    18b0:	eb 81       	ldd	r30, Y+3	; 0x03
    18b2:	fc 81       	ldd	r31, Y+4	; 0x04
    18b4:	81 81       	ldd	r24, Z+1	; 0x01
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	82 95       	swap	r24
    18bc:	92 95       	swap	r25
    18be:	90 7f       	andi	r25, 0xF0	; 240
    18c0:	98 27       	eor	r25, r24
    18c2:	80 7f       	andi	r24, 0xF0	; 240
    18c4:	98 27       	eor	r25, r24
    18c6:	82 2b       	or	r24, r18
    18c8:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<USBS);
    18ca:	a0 e4       	ldi	r26, 0x40	; 64
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e0 e4       	ldi	r30, 0x40	; 64
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	28 2f       	mov	r18, r24
    18d6:	27 7f       	andi	r18, 0xF7	; 247
    18d8:	eb 81       	ldd	r30, Y+3	; 0x03
    18da:	fc 81       	ldd	r31, Y+4	; 0x04
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	82 2b       	or	r24, r18
    18f0:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate )* 8UL))) - 1);
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	83 81       	ldd	r24, Z+3	; 0x03
    18f8:	94 81       	ldd	r25, Z+4	; 0x04
    18fa:	a5 81       	ldd	r26, Z+5	; 0x05
    18fc:	b6 81       	ldd	r27, Z+6	; 0x06
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	aa 1f       	adc	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	aa 1f       	adc	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	9c 01       	movw	r18, r24
    1918:	ad 01       	movw	r20, r26
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	94 e2       	ldi	r25, 0x24	; 36
    191e:	a4 ef       	ldi	r26, 0xF4	; 244
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__udivmodsi4>
    192a:	da 01       	movw	r26, r20
    192c:	c9 01       	movw	r24, r18
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1934:	e0 e4       	ldi	r30, 0x40	; 64
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	89 2f       	mov	r24, r25
    193e:	99 27       	eor	r25, r25
    1940:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1942:	e9 e2       	ldi	r30, 0x29	; 41
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	80 83       	st	Z, r24
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1964:	eb e2       	ldi	r30, 0x2B	; 43
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	80 72       	andi	r24, 0x20	; 32
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	b9 f3       	breq	.-18     	; 0x1964 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1976:	ec e2       	ldi	r30, 0x2C	; 44
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    198e:	eb e2       	ldi	r30, 0x2B	; 43
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	88 23       	and	r24, r24
    1996:	dc f7       	brge	.-10     	; 0x198e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1998:	ec e2       	ldi	r30, 0x2C	; 44
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <UART_sendString+0x6>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	fc 01       	movw	r30, r24
    19c4:	e2 0f       	add	r30, r18
    19c6:	f3 1f       	adc	r31, r19
    19c8:	80 81       	ld	r24, Z
    19ca:	0e 94 ac 0c 	call	0x1958	; 0x1958 <UART_sendByte>
		i++;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	80 81       	ld	r24, Z
    19e6:	88 23       	and	r24, r24
    19e8:	39 f7       	brne	.-50     	; 0x19b8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <UART_receiveString+0xa>
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9b 83       	std	Y+3, r25	; 0x03
    1a08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a0a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	8c 01       	movw	r16, r24
    1a18:	02 0f       	add	r16, r18
    1a1a:	13 1f       	adc	r17, r19
    1a1c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <UART_recieveByte>
    1a20:	f8 01       	movw	r30, r16
    1a22:	80 83       	st	Z, r24
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '\n') //ctrl+Enter
	{
		i++;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	8c 01       	movw	r16, r24
    1a38:	02 0f       	add	r16, r18
    1a3a:	13 1f       	adc	r17, r19
    1a3c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <UART_recieveByte>
    1a40:	f8 01       	movw	r30, r16
    1a42:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '\n') //ctrl+Enter
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	80 81       	ld	r24, Z
    1a56:	8a 30       	cpi	r24, 0x0A	; 10
    1a58:	31 f7       	brne	.-52     	; 0x1a26 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	9b 81       	ldd	r25, Y+3	; 0x03
    1a64:	fc 01       	movw	r30, r24
    1a66:	e2 0f       	add	r30, r18
    1a68:	f3 1f       	adc	r31, r19
    1a6a:	10 82       	st	Z, r1
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	2e 97       	sbiw	r28, 0x0e	; 14
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 f7 07 	call	0xfee	; 0xfee <GPIO_setupPinDirection>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 ea       	ldi	r26, 0xA0	; 160
    1aaa:	b1 e4       	ldi	r27, 0x41	; 65
    1aac:	8b 87       	std	Y+11, r24	; 0x0b
    1aae:	9c 87       	std	Y+12, r25	; 0x0c
    1ab0:	ad 87       	std	Y+13, r26	; 0x0d
    1ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	55 e4       	ldi	r21, 0x45	; 69
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	98 87       	std	Y+8, r25	; 0x08
    1ad0:	a9 87       	std	Y+9, r26	; 0x09
    1ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_init+0x7a>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_init+0xda>
    1b38:	80 e9       	ldi	r24, 0x90	; 144
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_init+0xc8>
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_init+0xbc>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_init+0x104>
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	6f ef       	ldi	r22, 0xFF	; 255
    1b8c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b90:	88 e3       	ldi	r24, 0x38	; 56
    1b92:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b96:	8c e0       	ldi	r24, 0x0C	; 12
    1b98:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_sendCommand>
}
    1ba2:	2e 96       	adiw	r28, 0x0e	; 14
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	e9 97       	sbiw	r28, 0x39	; 57
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	8d ab       	std	Y+53, r24	; 0x35
    1bde:	9e ab       	std	Y+54, r25	; 0x36
    1be0:	af ab       	std	Y+55, r26	; 0x37
    1be2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6d a9       	ldd	r22, Y+53	; 0x35
    1be6:	7e a9       	ldd	r23, Y+54	; 0x36
    1be8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bea:	98 ad       	ldd	r25, Y+56	; 0x38
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	55 e4       	ldi	r21, 0x45	; 69
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	89 ab       	std	Y+49, r24	; 0x31
    1bfe:	9a ab       	std	Y+50, r25	; 0x32
    1c00:	ab ab       	std	Y+51, r26	; 0x33
    1c02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_sendCommand+0x72>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c26:	69 a9       	ldd	r22, Y+49	; 0x31
    1c28:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c40:	7e a9       	ldd	r23, Y+54	; 0x36
    1c42:	8f a9       	ldd	r24, Y+55	; 0x37
    1c44:	98 ad       	ldd	r25, Y+56	; 0x38
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_sendCommand+0xd2>
    1c68:	80 e9       	ldi	r24, 0x90	; 144
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	9e a7       	std	Y+46, r25	; 0x2e
    1c6e:	8d a7       	std	Y+45, r24	; 0x2d
    1c70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_sendCommand+0xc0>
    1c78:	9e a7       	std	Y+46, r25	; 0x2e
    1c7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	98 ab       	std	Y+48, r25	; 0x30
    1c84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c88:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_sendCommand+0xb4>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	69 a9       	ldd	r22, Y+49	; 0x31
    1c92:	7a a9       	ldd	r23, Y+50	; 0x32
    1c94:	8b a9       	ldd	r24, Y+51	; 0x33
    1c96:	9c a9       	ldd	r25, Y+52	; 0x34
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	98 ab       	std	Y+48, r25	; 0x30
    1ca2:	8f a7       	std	Y+47, r24	; 0x2f
    1ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca8:	9c a7       	std	Y+44, r25	; 0x2c
    1caa:	8b a7       	std	Y+43, r24	; 0x2b
    1cac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_sendCommand+0xfc>
    1cb4:	9c a7       	std	Y+44, r25	; 0x2c
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	8f a3       	std	Y+39, r24	; 0x27
    1ccc:	98 a7       	std	Y+40, r25	; 0x28
    1cce:	a9 a7       	std	Y+41, r26	; 0x29
    1cd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	55 e4       	ldi	r21, 0x45	; 69
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8b a3       	std	Y+35, r24	; 0x23
    1cec:	9c a3       	std	Y+36, r25	; 0x24
    1cee:	ad a3       	std	Y+37, r26	; 0x25
    1cf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_sendCommand+0x160>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9a a3       	std	Y+34, r25	; 0x22
    1d10:	89 a3       	std	Y+33, r24	; 0x21
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d14:	6b a1       	ldd	r22, Y+35	; 0x23
    1d16:	7c a1       	ldd	r23, Y+36	; 0x24
    1d18:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d30:	89 a5       	ldd	r24, Y+41	; 0x29
    1d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9a a3       	std	Y+34, r25	; 0x22
    1d52:	89 a3       	std	Y+33, r24	; 0x21
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_sendCommand+0x1c0>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	98 a3       	std	Y+32, r25	; 0x20
    1d5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d60:	98 a1       	ldd	r25, Y+32	; 0x20
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_sendCommand+0x1ae>
    1d66:	98 a3       	std	Y+32, r25	; 0x20
    1d68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9a a3       	std	Y+34, r25	; 0x22
    1d72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	89 a1       	ldd	r24, Y+33	; 0x21
    1d76:	9a a1       	ldd	r25, Y+34	; 0x22
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_sendCommand+0x1a2>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d80:	7c a1       	ldd	r23, Y+36	; 0x24
    1d82:	8d a1       	ldd	r24, Y+37	; 0x25
    1d84:	9e a1       	ldd	r25, Y+38	; 0x26
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9a a3       	std	Y+34, r25	; 0x22
    1d90:	89 a3       	std	Y+33, r24	; 0x21
    1d92:	89 a1       	ldd	r24, Y+33	; 0x21
    1d94:	9a a1       	ldd	r25, Y+34	; 0x22
    1d96:	9e 8f       	std	Y+30, r25	; 0x1e
    1d98:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_sendCommand+0x1ea>
    1da2:	9e 8f       	std	Y+30, r25	; 0x1e
    1da4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	69 ad       	ldd	r22, Y+57	; 0x39
    1daa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	89 8f       	std	Y+25, r24	; 0x19
    1db8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dba:	ab 8f       	std	Y+27, r26	; 0x1b
    1dbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a e7       	ldi	r20, 0x7A	; 122
    1dcc:	55 e4       	ldi	r21, 0x45	; 69
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8d 8b       	std	Y+21, r24	; 0x15
    1dd8:	9e 8b       	std	Y+22, r25	; 0x16
    1dda:	af 8b       	std	Y+23, r26	; 0x17
    1ddc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9c 8b       	std	Y+20, r25	; 0x14
    1dfc:	8b 8b       	std	Y+19, r24	; 0x13
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_sendCommand+0x2ac>
    1e42:	80 e9       	ldi	r24, 0x90	; 144
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	9a 8b       	std	Y+18, r25	; 0x12
    1e48:	89 8b       	std	Y+17, r24	; 0x11
    1e4a:	89 89       	ldd	r24, Y+17	; 0x11
    1e4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_sendCommand+0x29a>
    1e52:	9a 8b       	std	Y+18, r25	; 0x12
    1e54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8b 89       	ldd	r24, Y+19	; 0x13
    1e58:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9c 8b       	std	Y+20, r25	; 0x14
    1e5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8b 89       	ldd	r24, Y+19	; 0x13
    1e62:	9c 89       	ldd	r25, Y+20	; 0x14
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <LCD_sendCommand+0x28e>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e70:	98 8d       	ldd	r25, Y+24	; 0x18
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	98 8b       	std	Y+16, r25	; 0x10
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	98 89       	ldd	r25, Y+16	; 0x10
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_sendCommand+0x2d6>
    1e8e:	98 8b       	std	Y+16, r25	; 0x10
    1e90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e8       	ldi	r26, 0x80	; 128
    1ea2:	bf e3       	ldi	r27, 0x3F	; 63
    1ea4:	8b 87       	std	Y+11, r24	; 0x0b
    1ea6:	9c 87       	std	Y+12, r25	; 0x0c
    1ea8:	ad 87       	std	Y+13, r26	; 0x0d
    1eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a e7       	ldi	r20, 0x7A	; 122
    1eba:	55 e4       	ldi	r21, 0x45	; 69
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	98 87       	std	Y+8, r25	; 0x08
    1ec8:	a9 87       	std	Y+9, r26	; 0x09
    1eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_sendCommand+0x39a>
    1f30:	80 e9       	ldi	r24, 0x90	; 144
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_sendCommand+0x388>
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_sendCommand+0x37c>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_sendCommand+0x3c4>
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f80:	e9 96       	adiw	r28, 0x39	; 57
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	e9 97       	sbiw	r28, 0x39	; 57
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	8d ab       	std	Y+53, r24	; 0x35
    1fbc:	9e ab       	std	Y+54, r25	; 0x36
    1fbe:	af ab       	std	Y+55, r26	; 0x37
    1fc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	89 ab       	std	Y+49, r24	; 0x31
    1fdc:	9a ab       	std	Y+50, r25	; 0x32
    1fde:	ab ab       	std	Y+51, r26	; 0x33
    1fe0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	98 ab       	std	Y+48, r25	; 0x30
    2000:	8f a7       	std	Y+47, r24	; 0x2f
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2004:	69 a9       	ldd	r22, Y+49	; 0x31
    2006:	7a a9       	ldd	r23, Y+50	; 0x32
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6d a9       	ldd	r22, Y+53	; 0x35
    201e:	7e a9       	ldd	r23, Y+54	; 0x36
    2020:	8f a9       	ldd	r24, Y+55	; 0x37
    2022:	98 ad       	ldd	r25, Y+56	; 0x38
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	98 ab       	std	Y+48, r25	; 0x30
    2042:	8f a7       	std	Y+47, r24	; 0x2f
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_displayCharacter+0xd2>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	9e a7       	std	Y+46, r25	; 0x2e
    204c:	8d a7       	std	Y+45, r24	; 0x2d
    204e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2050:	9e a5       	ldd	r25, Y+46	; 0x2e
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_displayCharacter+0xc0>
    2056:	9e a7       	std	Y+46, r25	; 0x2e
    2058:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8f a5       	ldd	r24, Y+47	; 0x2f
    205c:	98 a9       	ldd	r25, Y+48	; 0x30
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8f a5       	ldd	r24, Y+47	; 0x2f
    2066:	98 a9       	ldd	r25, Y+48	; 0x30
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_displayCharacter+0xb4>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	69 a9       	ldd	r22, Y+49	; 0x31
    2070:	7a a9       	ldd	r23, Y+50	; 0x32
    2072:	8b a9       	ldd	r24, Y+51	; 0x33
    2074:	9c a9       	ldd	r25, Y+52	; 0x34
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	98 ab       	std	Y+48, r25	; 0x30
    2080:	8f a7       	std	Y+47, r24	; 0x2f
    2082:	8f a5       	ldd	r24, Y+47	; 0x2f
    2084:	98 a9       	ldd	r25, Y+48	; 0x30
    2086:	9c a7       	std	Y+44, r25	; 0x2c
    2088:	8b a7       	std	Y+43, r24	; 0x2b
    208a:	8b a5       	ldd	r24, Y+43	; 0x2b
    208c:	9c a5       	ldd	r25, Y+44	; 0x2c
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_displayCharacter+0xfc>
    2092:	9c a7       	std	Y+44, r25	; 0x2c
    2094:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e8       	ldi	r26, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	8f a3       	std	Y+39, r24	; 0x27
    20aa:	98 a7       	std	Y+40, r25	; 0x28
    20ac:	a9 a7       	std	Y+41, r26	; 0x29
    20ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	6f a1       	ldd	r22, Y+39	; 0x27
    20b2:	78 a5       	ldd	r23, Y+40	; 0x28
    20b4:	89 a5       	ldd	r24, Y+41	; 0x29
    20b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a e7       	ldi	r20, 0x7A	; 122
    20be:	55 e4       	ldi	r21, 0x45	; 69
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8b a3       	std	Y+35, r24	; 0x23
    20ca:	9c a3       	std	Y+36, r25	; 0x24
    20cc:	ad a3       	std	Y+37, r26	; 0x25
    20ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d0:	6b a1       	ldd	r22, Y+35	; 0x23
    20d2:	7c a1       	ldd	r23, Y+36	; 0x24
    20d4:	8d a1       	ldd	r24, Y+37	; 0x25
    20d6:	9e a1       	ldd	r25, Y+38	; 0x26
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	6f a1       	ldd	r22, Y+39	; 0x27
    210c:	78 a5       	ldd	r23, Y+40	; 0x28
    210e:	89 a5       	ldd	r24, Y+41	; 0x29
    2110:	9a a5       	ldd	r25, Y+42	; 0x2a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9a a3       	std	Y+34, r25	; 0x22
    2130:	89 a3       	std	Y+33, r24	; 0x21
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_displayCharacter+0x1c0>
    2134:	80 e9       	ldi	r24, 0x90	; 144
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	98 a3       	std	Y+32, r25	; 0x20
    213a:	8f 8f       	std	Y+31, r24	; 0x1f
    213c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213e:	98 a1       	ldd	r25, Y+32	; 0x20
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_displayCharacter+0x1ae>
    2144:	98 a3       	std	Y+32, r25	; 0x20
    2146:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9a a3       	std	Y+34, r25	; 0x22
    2150:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	89 a1       	ldd	r24, Y+33	; 0x21
    2154:	9a a1       	ldd	r25, Y+34	; 0x22
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_displayCharacter+0x1a2>
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	6b a1       	ldd	r22, Y+35	; 0x23
    215e:	7c a1       	ldd	r23, Y+36	; 0x24
    2160:	8d a1       	ldd	r24, Y+37	; 0x25
    2162:	9e a1       	ldd	r25, Y+38	; 0x26
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	9e 8f       	std	Y+30, r25	; 0x1e
    2176:	8d 8f       	std	Y+29, r24	; 0x1d
    2178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_displayCharacter+0x1ea>
    2180:	9e 8f       	std	Y+30, r25	; 0x1e
    2182:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	69 ad       	ldd	r22, Y+57	; 0x39
    2188:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GPIO_writePort>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	89 8f       	std	Y+25, r24	; 0x19
    2196:	9a 8f       	std	Y+26, r25	; 0x1a
    2198:	ab 8f       	std	Y+27, r26	; 0x1b
    219a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	69 8d       	ldd	r22, Y+25	; 0x19
    219e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	55 e4       	ldi	r21, 0x45	; 69
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8d 8b       	std	Y+21, r24	; 0x15
    21b6:	9e 8b       	std	Y+22, r25	; 0x16
    21b8:	af 8b       	std	Y+23, r26	; 0x17
    21ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21bc:	6d 89       	ldd	r22, Y+21	; 0x15
    21be:	7e 89       	ldd	r23, Y+22	; 0x16
    21c0:	8f 89       	ldd	r24, Y+23	; 0x17
    21c2:	98 8d       	ldd	r25, Y+24	; 0x18
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_displayCharacter+0x24c>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    21de:	6d 89       	ldd	r22, Y+21	; 0x15
    21e0:	7e 89       	ldd	r23, Y+22	; 0x16
    21e2:	8f 89       	ldd	r24, Y+23	; 0x17
    21e4:	98 8d       	ldd	r25, Y+24	; 0x18
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	69 8d       	ldd	r22, Y+25	; 0x19
    21f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9c 8b       	std	Y+20, r25	; 0x14
    221c:	8b 8b       	std	Y+19, r24	; 0x13
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_displayCharacter+0x2ac>
    2220:	80 e9       	ldi	r24, 0x90	; 144
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	9a 8b       	std	Y+18, r25	; 0x12
    2226:	89 8b       	std	Y+17, r24	; 0x11
    2228:	89 89       	ldd	r24, Y+17	; 0x11
    222a:	9a 89       	ldd	r25, Y+18	; 0x12
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_displayCharacter+0x29a>
    2230:	9a 8b       	std	Y+18, r25	; 0x12
    2232:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_displayCharacter+0x28e>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9c 8b       	std	Y+20, r25	; 0x14
    225a:	8b 8b       	std	Y+19, r24	; 0x13
    225c:	8b 89       	ldd	r24, Y+19	; 0x13
    225e:	9c 89       	ldd	r25, Y+20	; 0x14
    2260:	98 8b       	std	Y+16, r25	; 0x10
    2262:	8f 87       	std	Y+15, r24	; 0x0f
    2264:	8f 85       	ldd	r24, Y+15	; 0x0f
    2266:	98 89       	ldd	r25, Y+16	; 0x10
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_displayCharacter+0x2d6>
    226c:	98 8b       	std	Y+16, r25	; 0x10
    226e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <GPIO_writePin>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	8b 87       	std	Y+11, r24	; 0x0b
    2284:	9c 87       	std	Y+12, r25	; 0x0c
    2286:	ad 87       	std	Y+13, r26	; 0x0d
    2288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	55 e4       	ldi	r21, 0x45	; 69
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8f 83       	std	Y+7, r24	; 0x07
    22a4:	98 87       	std	Y+8, r25	; 0x08
    22a6:	a9 87       	std	Y+9, r26	; 0x09
    22a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	0f c0       	rjmp	.+30     	; 0x232c <LCD_displayCharacter+0x39a>
    230e:	80 e9       	ldi	r24, 0x90	; 144
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_displayCharacter+0x388>
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <LCD_displayCharacter+0x37c>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_displayCharacter+0x3c4>
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    235e:	e9 96       	adiw	r28, 0x39	; 57
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <LCD_displayString+0x6>
    2376:	0f 92       	push	r0
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9b 83       	std	Y+3, r25	; 0x03
    237e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2380:	19 82       	std	Y+1, r1	; 0x01
    2382:	0e c0       	rjmp	.+28     	; 0x23a0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	9b 81       	ldd	r25, Y+3	; 0x03
    238e:	fc 01       	movw	r30, r24
    2390:	e2 0f       	add	r30, r18
    2392:	f3 1f       	adc	r31, r19
    2394:	80 81       	ld	r24, Z
    2396:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayCharacter>
		i++;
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	9b 81       	ldd	r25, Y+3	; 0x03
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	88 23       	and	r24, r24
    23b4:	39 f7       	brne	.-50     	; 0x2384 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <LCD_moveCursor+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <LCD_moveCursor+0x8>
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3d 83       	std	Y+5, r19	; 0x05
    23dc:	2c 83       	std	Y+4, r18	; 0x04
    23de:	8c 81       	ldd	r24, Y+4	; 0x04
    23e0:	9d 81       	ldd	r25, Y+5	; 0x05
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	c1 f0       	breq	.+48     	; 0x2418 <LCD_moveCursor+0x56>
    23e8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ea:	3d 81       	ldd	r19, Y+5	; 0x05
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	2c f4       	brge	.+10     	; 0x23fc <LCD_moveCursor+0x3a>
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 f0       	breq	.+24     	; 0x2412 <LCD_moveCursor+0x50>
    23fa:	19 c0       	rjmp	.+50     	; 0x242e <LCD_moveCursor+0x6c>
    23fc:	2c 81       	ldd	r18, Y+4	; 0x04
    23fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	69 f0       	breq	.+26     	; 0x2420 <LCD_moveCursor+0x5e>
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	61 f0       	breq	.+24     	; 0x2428 <LCD_moveCursor+0x66>
    2410:	0e c0       	rjmp	.+28     	; 0x242e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	0b c0       	rjmp	.+22     	; 0x242e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	80 5c       	subi	r24, 0xC0	; 192
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	07 c0       	rjmp	.+14     	; 0x242e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	80 5f       	subi	r24, 0xF0	; 240
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	03 c0       	rjmp	.+6      	; 0x242e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	80 5b       	subi	r24, 0xB0	; 176
    242c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_sendCommand>
}
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <LCD_displayStringRowColumn+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <LCD_displayStringRowColumn+0x8>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	6a 83       	std	Y+2, r22	; 0x02
    2456:	5c 83       	std	Y+4, r21	; 0x04
    2458:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	6a 81       	ldd	r22, Y+2	; 0x02
    245e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayString>
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	62 97       	sbiw	r28, 0x12	; 18
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2490:	89 89       	ldd	r24, Y+17	; 0x11
    2492:	9a 89       	ldd	r25, Y+18	; 0x12
    2494:	9e 01       	movw	r18, r28
    2496:	2f 5f       	subi	r18, 0xFF	; 255
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	b9 01       	movw	r22, r18
    249c:	4a e0       	ldi	r20, 0x0A	; 10
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <itoa>
   LCD_displayString(buff); /* Display the string */
    24a4:	ce 01       	movw	r24, r28
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayString>
}
    24ac:	62 96       	adiw	r28, 0x12	; 18
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <LCD_sendCommand>
}
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <DcMotor_Init>:
#include<avr/io.h>
#include"../MCAL/PWM.h"
#include"motor.h"

void DcMotor_Init(void)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,PB0);
    24da:	a7 e3       	ldi	r26, 0x37	; 55
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e7 e3       	ldi	r30, 0x37	; 55
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	81 60       	ori	r24, 0x01	; 1
    24e6:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1);
    24e8:	a7 e3       	ldi	r26, 0x37	; 55
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e7 e3       	ldi	r30, 0x37	; 55
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	82 60       	ori	r24, 0x02	; 2
    24f4:	8c 93       	st	X, r24

	/* Motor is stop at the beginning */
	PORTB &= 0xFC;
    24f6:	a8 e3       	ldi	r26, 0x38	; 56
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e8 e3       	ldi	r30, 0x38	; 56
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	8c 7f       	andi	r24, 0xFC	; 252
    2502:	8c 93       	st	X, r24


}
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <DcMotor_Rotate>:
 void DcMotor_Rotate(DcMotor_State state,uint8 speed)
 {
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	00 d0       	rcall	.+0      	; 0x2510 <DcMotor_Rotate+0x6>
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	6a 83       	std	Y+2, r22	; 0x02

	 if(state==CW){
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	88 23       	and	r24, r24
    251c:	79 f4       	brne	.+30     	; 0x253c <DcMotor_Rotate+0x32>
		 PORTB &=0XFC ;
    251e:	a8 e3       	ldi	r26, 0x38	; 56
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e8 e3       	ldi	r30, 0x38	; 56
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8c 7f       	andi	r24, 0xFC	; 252
    252a:	8c 93       	st	X, r24
		 PORTB|=(1<<PB0);
    252c:	a8 e3       	ldi	r26, 0x38	; 56
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e8 e3       	ldi	r30, 0x38	; 56
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	81 60       	ori	r24, 0x01	; 1
    2538:	8c 93       	st	X, r24
    253a:	1c c0       	rjmp	.+56     	; 0x2574 <DcMotor_Rotate+0x6a>
	 }

	 else if(state==ANTI_CW){
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	79 f4       	brne	.+30     	; 0x2560 <DcMotor_Rotate+0x56>
		 PORTB &=0XFC ;
    2542:	a8 e3       	ldi	r26, 0x38	; 56
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e8 e3       	ldi	r30, 0x38	; 56
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8c 7f       	andi	r24, 0xFC	; 252
    254e:	8c 93       	st	X, r24
		 PORTB|=(1<<PB1);
    2550:	a8 e3       	ldi	r26, 0x38	; 56
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e8 e3       	ldi	r30, 0x38	; 56
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	82 60       	ori	r24, 0x02	; 2
    255c:	8c 93       	st	X, r24
    255e:	0a c0       	rjmp	.+20     	; 0x2574 <DcMotor_Rotate+0x6a>
	 }

	 else if(state==STOP){
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	39 f4       	brne	.+14     	; 0x2574 <DcMotor_Rotate+0x6a>
		 PORTB &=0XFC ;
    2566:	a8 e3       	ldi	r26, 0x38	; 56
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e8 e3       	ldi	r30, 0x38	; 56
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8c 7f       	andi	r24, 0xFC	; 252
    2572:	8c 93       	st	X, r24
	 }

	 PWM_Timer0_Start(speed);
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	0e 94 75 07 	call	0xeea	; 0xeea <PWM_Timer0_Start>

 }
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <Servo_Init>:




// Function to initialize PWM and servo settings
void Servo_Init() {
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	// Set OC2/PD7 pin as output
	    DDRD |= (1 << PD7);
    258c:	a1 e3       	ldi	r26, 0x31	; 49
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e1 e3       	ldi	r30, 0x31	; 49
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	8c 93       	st	X, r24

}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <Servo_SetAngle>:

// Function to set the angle of the servo motor
void Servo_SetAngle(uint8_t angle) {
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer2_Start(angle);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 b2 07 	call	0xf64	; 0xf64 <PWM_Timer2_Start>



}
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <stringSubstringToInteger>:
#include"APP.h"



int stringSubstringToInteger( char *str, int start, int end) {
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	64 97       	sbiw	r28, 0x14	; 20
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	9a 87       	std	Y+10, r25	; 0x0a
    25d4:	89 87       	std	Y+9, r24	; 0x09
    25d6:	7c 87       	std	Y+12, r23	; 0x0c
    25d8:	6b 87       	std	Y+11, r22	; 0x0b
    25da:	5e 87       	std	Y+14, r21	; 0x0e
    25dc:	4d 87       	std	Y+13, r20	; 0x0d

    // Convert the substring to an integer
    int result = atoi(subStr);

    return result;
}
    25de:	2d b7       	in	r18, 0x3d	; 61
    25e0:	3e b7       	in	r19, 0x3e	; 62
    25e2:	3c 8b       	std	Y+20, r19	; 0x14
    25e4:	2b 8b       	std	Y+19, r18	; 0x13
#include"APP.h"



int stringSubstringToInteger( char *str, int start, int end) {
    25e6:	8d b7       	in	r24, 0x3d	; 61
    25e8:	9e b7       	in	r25, 0x3e	; 62
    25ea:	98 8b       	std	Y+16, r25	; 0x10
    25ec:	8f 87       	std	Y+15, r24	; 0x0f
    // Calculate the length of the substring
    int length = end - start + 1;
    25ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    25f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    25f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25f6:	a9 01       	movw	r20, r18
    25f8:	48 1b       	sub	r20, r24
    25fa:	59 0b       	sbc	r21, r25
    25fc:	ca 01       	movw	r24, r20
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05

    // Create a temporary buffer to hold the substring
    char subStr[length + 1]; // +1 for the null terminator
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	2d b7       	in	r18, 0x3d	; 61
    260c:	3e b7       	in	r19, 0x3e	; 62
    260e:	28 1b       	sub	r18, r24
    2610:	39 0b       	sbc	r19, r25
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	3e bf       	out	0x3e, r19	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	2d bf       	out	0x3d, r18	; 61
    261c:	4d b7       	in	r20, 0x3d	; 61
    261e:	5e b7       	in	r21, 0x3e	; 62
    2620:	4f 5f       	subi	r20, 0xFF	; 255
    2622:	5f 4f       	sbci	r21, 0xFF	; 255
    2624:	5a 8b       	std	Y+18, r21	; 0x12
    2626:	49 8b       	std	Y+17, r20	; 0x11
    2628:	89 89       	ldd	r24, Y+17	; 0x11
    262a:	9a 89       	ldd	r25, Y+18	; 0x12
    262c:	00 96       	adiw	r24, 0x00	; 0
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	98 87       	std	Y+8, r25	; 0x08
    2638:	8f 83       	std	Y+7, r24	; 0x07

    // Copy the substring into the temporary buffer
    for (int i = 0; i < length; i++) {
    263a:	1a 82       	std	Y+2, r1	; 0x02
    263c:	19 82       	std	Y+1, r1	; 0x01
    263e:	1a c0       	rjmp	.+52     	; 0x2674 <stringSubstringToInteger+0xb6>
        subStr[i] = str[start + i];
    2640:	49 81       	ldd	r20, Y+1	; 0x01
    2642:	5a 81       	ldd	r21, Y+2	; 0x02
    2644:	2b 85       	ldd	r18, Y+11	; 0x0b
    2646:	3c 85       	ldd	r19, Y+12	; 0x0c
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	82 0f       	add	r24, r18
    264e:	93 1f       	adc	r25, r19
    2650:	9c 01       	movw	r18, r24
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	20 81       	ld	r18, Z
    265e:	8f 81       	ldd	r24, Y+7	; 0x07
    2660:	98 85       	ldd	r25, Y+8	; 0x08
    2662:	fc 01       	movw	r30, r24
    2664:	e4 0f       	add	r30, r20
    2666:	f5 1f       	adc	r31, r21
    2668:	20 83       	st	Z, r18

    // Create a temporary buffer to hold the substring
    char subStr[length + 1]; // +1 for the null terminator

    // Copy the substring into the temporary buffer
    for (int i = 0; i < length; i++) {
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	29 81       	ldd	r18, Y+1	; 0x01
    2676:	3a 81       	ldd	r19, Y+2	; 0x02
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	28 17       	cp	r18, r24
    267e:	39 07       	cpc	r19, r25
    2680:	fc f2       	brlt	.-66     	; 0x2640 <stringSubstringToInteger+0x82>
        subStr[i] = str[start + i];
    }
    subStr[length] = '\0'; // Null-terminate the substring
    2682:	2d 81       	ldd	r18, Y+5	; 0x05
    2684:	3e 81       	ldd	r19, Y+6	; 0x06
    2686:	8f 81       	ldd	r24, Y+7	; 0x07
    2688:	98 85       	ldd	r25, Y+8	; 0x08
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	10 82       	st	Z, r1

    // Convert the substring to an integer
    int result = atoi(subStr);
    2692:	8f 81       	ldd	r24, Y+7	; 0x07
    2694:	98 85       	ldd	r25, Y+8	; 0x08
    2696:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <atoi>
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03

    return result;
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	2f 85       	ldd	r18, Y+15	; 0x0f
    26a4:	38 89       	ldd	r19, Y+16	; 0x10
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	3e bf       	out	0x3e, r19	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	2d bf       	out	0x3d, r18	; 61
}
    26b0:	4b 89       	ldd	r20, Y+19	; 0x13
    26b2:	5c 89       	ldd	r21, Y+20	; 0x14
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	5e bf       	out	0x3e, r21	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	4d bf       	out	0x3d, r20	; 61
    26be:	64 96       	adiw	r28, 0x14	; 20
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <Timer_ISR_StopWatch>:
uint8 g_hour=0;



void Timer_ISR_StopWatch(void)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	if(g_sec==60)
    26d8:	80 91 76 02 	lds	r24, 0x0276
    26dc:	8c 33       	cpi	r24, 0x3C	; 60
    26de:	09 f0       	breq	.+2      	; 0x26e2 <Timer_ISR_StopWatch+0x12>
    26e0:	ad c0       	rjmp	.+346    	; 0x283c <Timer_ISR_StopWatch+0x16c>
	{
		g_sec=0;
    26e2:	10 92 76 02 	sts	0x0276, r1
			LCD_moveCursor(2, 13);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	6d e0       	ldi	r22, 0x0D	; 13
    26ea:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_sec/10);//13..14
    26ee:	80 91 76 02 	lds	r24, 0x0276
    26f2:	9a e0       	ldi	r25, 0x0A	; 10
    26f4:	69 2f       	mov	r22, r25
    26f6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
			LCD_moveCursor(2, 14);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	6e e0       	ldi	r22, 0x0E	; 14
    2706:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_sec%10);//13..14
    270a:	80 91 76 02 	lds	r24, 0x0276
    270e:	9a e0       	ldi	r25, 0x0A	; 10
    2710:	69 2f       	mov	r22, r25
    2712:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2716:	89 2f       	mov	r24, r25
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>


		if(g_min==60)
    2720:	80 91 77 02 	lds	r24, 0x0277
    2724:	8c 33       	cpi	r24, 0x3C	; 60
    2726:	09 f0       	breq	.+2      	; 0x272a <Timer_ISR_StopWatch+0x5a>
    2728:	66 c0       	rjmp	.+204    	; 0x27f6 <Timer_ISR_StopWatch+0x126>
		{


			g_min=0;
    272a:	10 92 77 02 	sts	0x0277, r1
			LCD_moveCursor(2, 10);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	6a e0       	ldi	r22, 0x0A	; 10
    2732:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_min/10);//10..11
    2736:	80 91 77 02 	lds	r24, 0x0277
    273a:	9a e0       	ldi	r25, 0x0A	; 10
    273c:	69 2f       	mov	r22, r25
    273e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
			LCD_moveCursor(2, 11);
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	6b e0       	ldi	r22, 0x0B	; 11
    274e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_min%10);//10..11
    2752:	80 91 77 02 	lds	r24, 0x0277
    2756:	9a e0       	ldi	r25, 0x0A	; 10
    2758:	69 2f       	mov	r22, r25
    275a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    275e:	89 2f       	mov	r24, r25
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>



			if(g_hour==24)
    2768:	80 91 78 02 	lds	r24, 0x0278
    276c:	88 31       	cpi	r24, 0x18	; 24
    276e:	01 f5       	brne	.+64     	; 0x27b0 <Timer_ISR_StopWatch+0xe0>
			{
				g_hour=0;
    2770:	10 92 78 02 	sts	0x0278, r1
				LCD_moveCursor(2, 7);
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	67 e0       	ldi	r22, 0x07	; 7
    2778:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
				LCD_intgerToString(g_hour/10);//7..8
    277c:	80 91 78 02 	lds	r24, 0x0278
    2780:	9a e0       	ldi	r25, 0x0A	; 10
    2782:	69 2f       	mov	r22, r25
    2784:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
				LCD_moveCursor(2, 8);
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	68 e0       	ldi	r22, 0x08	; 8
    2794:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
				LCD_intgerToString(g_hour%10);//7..8
    2798:	80 91 78 02 	lds	r24, 0x0278
    279c:	9a e0       	ldi	r25, 0x0A	; 10
    279e:	69 2f       	mov	r22, r25
    27a0:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    27a4:	89 2f       	mov	r24, r25
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
    27ae:	68 c0       	rjmp	.+208    	; 0x2880 <Timer_ISR_StopWatch+0x1b0>


			}
			else
			{
				g_hour++;
    27b0:	80 91 78 02 	lds	r24, 0x0278
    27b4:	8f 5f       	subi	r24, 0xFF	; 255
    27b6:	80 93 78 02 	sts	0x0278, r24
				LCD_moveCursor(2, 7);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	67 e0       	ldi	r22, 0x07	; 7
    27be:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
				LCD_intgerToString(g_hour/10);//7..8
    27c2:	80 91 78 02 	lds	r24, 0x0278
    27c6:	9a e0       	ldi	r25, 0x0A	; 10
    27c8:	69 2f       	mov	r22, r25
    27ca:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
				LCD_moveCursor(2, 8);
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	68 e0       	ldi	r22, 0x08	; 8
    27da:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
				LCD_intgerToString(g_hour%10);//7..8
    27de:	80 91 78 02 	lds	r24, 0x0278
    27e2:	9a e0       	ldi	r25, 0x0A	; 10
    27e4:	69 2f       	mov	r22, r25
    27e6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    27ea:	89 2f       	mov	r24, r25
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
    27f4:	45 c0       	rjmp	.+138    	; 0x2880 <Timer_ISR_StopWatch+0x1b0>

			}

		}
		else{
			g_min++;
    27f6:	80 91 77 02 	lds	r24, 0x0277
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	80 93 77 02 	sts	0x0277, r24
			LCD_moveCursor(2, 10);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	6a e0       	ldi	r22, 0x0A	; 10
    2804:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_min/10);//10..11
    2808:	80 91 77 02 	lds	r24, 0x0277
    280c:	9a e0       	ldi	r25, 0x0A	; 10
    280e:	69 2f       	mov	r22, r25
    2810:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
			LCD_moveCursor(2, 11);
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	6b e0       	ldi	r22, 0x0B	; 11
    2820:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
			LCD_intgerToString(g_min%10);//13..14
    2824:	80 91 77 02 	lds	r24, 0x0277
    2828:	9a e0       	ldi	r25, 0x0A	; 10
    282a:	69 2f       	mov	r22, r25
    282c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2830:	89 2f       	mov	r24, r25
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
    283a:	22 c0       	rjmp	.+68     	; 0x2880 <Timer_ISR_StopWatch+0x1b0>
		}
	}

	else{

		g_sec++;
    283c:	80 91 76 02 	lds	r24, 0x0276
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	80 93 76 02 	sts	0x0276, r24
		LCD_moveCursor(2, 13);
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	6d e0       	ldi	r22, 0x0D	; 13
    284a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
		LCD_intgerToString(g_sec/10);//13..14
    284e:	80 91 76 02 	lds	r24, 0x0276
    2852:	9a e0       	ldi	r25, 0x0A	; 10
    2854:	69 2f       	mov	r22, r25
    2856:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
		LCD_moveCursor(2, 14);
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	6e e0       	ldi	r22, 0x0E	; 14
    2866:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_moveCursor>
		LCD_intgerToString(g_sec%10);//13..14
    286a:	80 91 76 02 	lds	r24, 0x0276
    286e:	9a e0       	ldi	r25, 0x0A	; 10
    2870:	69 2f       	mov	r22, r25
    2872:	0e 94 89 15 	call	0x2b12	; 0x2b12 <__udivmodqi4>
    2876:	89 2f       	mov	r24, r25
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>


	}
}
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <DisplytimeOnLCD>:



void DisplytimeOnLCD(void)
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	//}
	/*Speed: 76% Direction: -18 ||
	|| Time: 00:00:28 AM */


}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <main>:




int main (void)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	a6 97       	sbiw	r28, 0x26	; 38
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_Configuration={_8_bit,no_parity,_1_bit,9600};
    28a8:	ce 01       	movw	r24, r28
    28aa:	07 96       	adiw	r24, 0x07	; 7
    28ac:	9e 8f       	std	Y+30, r25	; 0x1e
    28ae:	8d 8f       	std	Y+29, r24	; 0x1d
    28b0:	ec e6       	ldi	r30, 0x6C	; 108
    28b2:	f2 e0       	ldi	r31, 0x02	; 2
    28b4:	f8 a3       	std	Y+32, r31	; 0x20
    28b6:	ef 8f       	std	Y+31, r30	; 0x1f
    28b8:	f7 e0       	ldi	r31, 0x07	; 7
    28ba:	f9 a3       	std	Y+33, r31	; 0x21
    28bc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    28be:	f8 a1       	ldd	r31, Y+32	; 0x20
    28c0:	00 80       	ld	r0, Z
    28c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c4:	98 a1       	ldd	r25, Y+32	; 0x20
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	98 a3       	std	Y+32, r25	; 0x20
    28ca:	8f 8f       	std	Y+31, r24	; 0x1f
    28cc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    28ce:	fe 8d       	ldd	r31, Y+30	; 0x1e
    28d0:	00 82       	st	Z, r0
    28d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	9e 8f       	std	Y+30, r25	; 0x1e
    28da:	8d 8f       	std	Y+29, r24	; 0x1d
    28dc:	99 a1       	ldd	r25, Y+33	; 0x21
    28de:	91 50       	subi	r25, 0x01	; 1
    28e0:	99 a3       	std	Y+33, r25	; 0x21
    28e2:	e9 a1       	ldd	r30, Y+33	; 0x21
    28e4:	ee 23       	and	r30, r30
    28e6:	51 f7       	brne	.-44     	; 0x28bc <main+0x28>
	Timer1_ConfigType Timer1_Configuration={0,15625,F_CPU_1024,CTC_MODE}; //15625 for making an interrupt each second
    28e8:	ce 01       	movw	r24, r28
    28ea:	0e 96       	adiw	r24, 0x0e	; 14
    28ec:	9b a3       	std	Y+35, r25	; 0x23
    28ee:	8a a3       	std	Y+34, r24	; 0x22
    28f0:	e6 e6       	ldi	r30, 0x66	; 102
    28f2:	f2 e0       	ldi	r31, 0x02	; 2
    28f4:	fd a3       	std	Y+37, r31	; 0x25
    28f6:	ec a3       	std	Y+36, r30	; 0x24
    28f8:	f6 e0       	ldi	r31, 0x06	; 6
    28fa:	fe a3       	std	Y+38, r31	; 0x26
    28fc:	ec a1       	ldd	r30, Y+36	; 0x24
    28fe:	fd a1       	ldd	r31, Y+37	; 0x25
    2900:	00 80       	ld	r0, Z
    2902:	8c a1       	ldd	r24, Y+36	; 0x24
    2904:	9d a1       	ldd	r25, Y+37	; 0x25
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	9d a3       	std	Y+37, r25	; 0x25
    290a:	8c a3       	std	Y+36, r24	; 0x24
    290c:	ea a1       	ldd	r30, Y+34	; 0x22
    290e:	fb a1       	ldd	r31, Y+35	; 0x23
    2910:	00 82       	st	Z, r0
    2912:	8a a1       	ldd	r24, Y+34	; 0x22
    2914:	9b a1       	ldd	r25, Y+35	; 0x23
    2916:	01 96       	adiw	r24, 0x01	; 1
    2918:	9b a3       	std	Y+35, r25	; 0x23
    291a:	8a a3       	std	Y+34, r24	; 0x22
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	91 50       	subi	r25, 0x01	; 1
    2920:	9e a3       	std	Y+38, r25	; 0x26
    2922:	ee a1       	ldd	r30, Y+38	; 0x26
    2924:	ee 23       	and	r30, r30
    2926:	51 f7       	brne	.-44     	; 0x28fc <main+0x68>

	UART_init(&UART_Configuration);
    2928:	ce 01       	movw	r24, r28
    292a:	07 96       	adiw	r24, 0x07	; 7
    292c:	0e 94 13 0c 	call	0x1826	; 0x1826 <UART_init>
	Timer1_init(&Timer1_Configuration);
    2930:	ce 01       	movw	r24, r28
    2932:	0e 96       	adiw	r24, 0x0e	; 14
    2934:	0e 94 9b 0b 	call	0x1736	; 0x1736 <Timer1_init>
	DcMotor_Init();
    2938:	0e 94 69 12 	call	0x24d2	; 0x24d2 <DcMotor_Init>
	LCD_init();
    293c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_init>
	Servo_Init();
    2940:	0e 94 c2 12 	call	0x2584	; 0x2584 <Servo_Init>

	uint8 DataFlag=0;
    2944:	1e 82       	std	Y+6, r1	; 0x06
	uint8 UART_Data[9];
	int Velocity=0;
    2946:	1d 82       	std	Y+5, r1	; 0x05
    2948:	1c 82       	std	Y+4, r1	; 0x04
	int Angle=0;
    294a:	1b 82       	std	Y+3, r1	; 0x03
    294c:	1a 82       	std	Y+2, r1	; 0x02

	DcMotor_State DcMotor_Direction=CW;  		//,F --->ANTI_CW ,  B---> CW
    294e:	19 82       	std	Y+1, r1	; 0x01

	LCD_displayStringRowColumn(0, 1, "Speed:000%");
    2950:	20 e6       	ldi	r18, 0x60	; 96
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	a9 01       	movw	r20, r18
    295a:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 1,"Direction:00");
    295e:	2b e6       	ldi	r18, 0x6B	; 107
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	a9 01       	movw	r20, r18
    2968:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 1, "Time: 00:00:00");
    296c:	28 e7       	ldi	r18, 0x78	; 120
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	61 e0       	ldi	r22, 0x01	; 1
    2974:	a9 01       	movw	r20, r18
    2976:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>



	do{
		//Timer1_setCallBack(Timer_ISR_StopWatch);
		UART_sendString("please put the Frame: ");
    297a:	87 e8       	ldi	r24, 0x87	; 135
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
		UART_sendString("\r\n");
    2982:	8e e9       	ldi	r24, 0x9E	; 158
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
		UART_receiveString(UART_Data);
    298a:	ce 01       	movw	r24, r28
    298c:	44 96       	adiw	r24, 0x14	; 20
    298e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_receiveString>

		Velocity	= stringSubstringToInteger(UART_Data,0,2);
    2992:	ce 01       	movw	r24, r28
    2994:	44 96       	adiw	r24, 0x14	; 20
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	42 e0       	ldi	r20, 0x02	; 2
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	0e 94 df 12 	call	0x25be	; 0x25be <stringSubstringToInteger>
    29a2:	9d 83       	std	Y+5, r25	; 0x05
    29a4:	8c 83       	std	Y+4, r24	; 0x04
		Angle		= stringSubstringToInteger(UART_Data,4,5);
    29a6:	ce 01       	movw	r24, r28
    29a8:	44 96       	adiw	r24, 0x14	; 20
    29aa:	64 e0       	ldi	r22, 0x04	; 4
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	45 e0       	ldi	r20, 0x05	; 5
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	0e 94 df 12 	call	0x25be	; 0x25be <stringSubstringToInteger>
    29b6:	9b 83       	std	Y+3, r25	; 0x03
    29b8:	8a 83       	std	Y+2, r24	; 0x02


		if(UART_Data[7]=='E')
    29ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29bc:	85 34       	cpi	r24, 0x45	; 69
    29be:	09 f0       	breq	.+2      	; 0x29c2 <main+0x12e>
    29c0:	40 c0       	rjmp	.+128    	; 0x2a42 <main+0x1ae>
		{


			if((Angle<=45)&&(Velocity<=100)){
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	8e 32       	cpi	r24, 0x2E	; 46
    29c8:	91 05       	cpc	r25, r1
    29ca:	74 f5       	brge	.+92     	; 0x2a28 <main+0x194>
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	85 36       	cpi	r24, 0x65	; 101
    29d2:	91 05       	cpc	r25, r1
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <main+0x194>


				if((UART_Data[3]=='F')||UART_Data[3]=='B'){
    29d6:	8f 89       	ldd	r24, Y+23	; 0x17
    29d8:	86 34       	cpi	r24, 0x46	; 70
    29da:	19 f0       	breq	.+6      	; 0x29e2 <main+0x14e>
    29dc:	8f 89       	ldd	r24, Y+23	; 0x17
    29de:	82 34       	cpi	r24, 0x42	; 66
    29e0:	b1 f4       	brne	.+44     	; 0x2a0e <main+0x17a>
					if((UART_Data[6]=='R')||UART_Data[6]=='L'){
    29e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29e4:	82 35       	cpi	r24, 0x52	; 82
    29e6:	19 f0       	breq	.+6      	; 0x29ee <main+0x15a>
    29e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29ea:	8c 34       	cpi	r24, 0x4C	; 76
    29ec:	19 f4       	brne	.+6      	; 0x29f4 <main+0x160>
							DataFlag=1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	8e 83       	std	Y+6, r24	; 0x06
    29f2:	33 c0       	rjmp	.+102    	; 0x2a5a <main+0x1c6>
					}

					else{
						UART_sendString("\r\n");
    29f4:	8e e9       	ldi	r24, 0x9E	; 158
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
						UART_sendString("Wrong direction of the stepper motor. ");
    29fc:	81 ea       	ldi	r24, 0xA1	; 161
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
						UART_sendString("\r\n");
    2a04:	8e e9       	ldi	r24, 0x9E	; 158
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
    2a0c:	26 c0       	rjmp	.+76     	; 0x2a5a <main+0x1c6>
				}



				else{
					UART_sendString("\r\n");
    2a0e:	8e e9       	ldi	r24, 0x9E	; 158
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
					UART_sendString("Wrong direction of the DC motor . ");
    2a16:	88 ec       	ldi	r24, 0xC8	; 200
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
					UART_sendString("\r\n");
    2a1e:	8e e9       	ldi	r24, 0x9E	; 158
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
    2a26:	19 c0       	rjmp	.+50     	; 0x2a5a <main+0x1c6>



			}
			else{
				UART_sendString("\r\n");
    2a28:	8e e9       	ldi	r24, 0x9E	; 158
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
				UART_sendString("You have Exceeds the limits of Velocity or Angle. ");
    2a30:	8b ee       	ldi	r24, 0xEB	; 235
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
				UART_sendString("\r\n");
    2a38:	8e e9       	ldi	r24, 0x9E	; 158
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
    2a40:	0c c0       	rjmp	.+24     	; 0x2a5a <main+0x1c6>

		}


		else{
			UART_sendString("\r\n");
    2a42:	8e e9       	ldi	r24, 0x9E	; 158
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
			UART_sendString("The Frame should End by 'E' . ");
    2a4a:	8e e1       	ldi	r24, 0x1E	; 30
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
			UART_sendString("\r\n");
    2a52:	8e e9       	ldi	r24, 0x9E	; 158
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>

		}

	}while(DataFlag!=1);
    2a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <main+0x1ce>
    2a60:	8c cf       	rjmp	.-232    	; 0x297a <main+0xe6>



	if(UART_Data[3]=='F')
    2a62:	8f 89       	ldd	r24, Y+23	; 0x17
    2a64:	86 34       	cpi	r24, 0x46	; 70
    2a66:	19 f4       	brne	.+6      	; 0x2a6e <main+0x1da>
		{
		DcMotor_Direction=ANTI_CW;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <main+0x1e2>
		}

    else if(UART_Data[3]=='B'){
    2a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a70:	82 34       	cpi	r24, 0x42	; 66
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <main+0x1e2>
    	DcMotor_Direction=CW;
    2a74:	19 82       	std	Y+1, r1	; 0x01
//	UART_sendString("\r\n");
//
//while(UART_recieveByte()!='#')
//{

	DcMotor_Rotate(DcMotor_Direction, Velocity);
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	69 2f       	mov	r22, r25
    2a7c:	0e 94 85 12 	call	0x250a	; 0x250a <DcMotor_Rotate>
	Servo_SetAngle(Angle);
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <Servo_SetAngle>




	LCD_displayStringRowColumn(0, 1, "Speed:");
    2a86:	2d e3       	ldi	r18, 0x3D	; 61
    2a88:	31 e0       	ldi	r19, 0x01	; 1
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	a9 01       	movw	r20, r18
    2a90:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>


	if(Velocity==100){
    2a94:	8c 81       	ldd	r24, Y+4	; 0x04
    2a96:	9d 81       	ldd	r25, Y+5	; 0x05
    2a98:	84 36       	cpi	r24, 0x64	; 100
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	29 f4       	brne	.+10     	; 0x2aa8 <main+0x214>
	LCD_intgerToString(Velocity);
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa2:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
    2aa6:	0d c0       	rjmp	.+26     	; 0x2ac2 <main+0x22e>
	}
	else if(Velocity<100){
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	84 36       	cpi	r24, 0x64	; 100
    2aae:	91 05       	cpc	r25, r1
    2ab0:	44 f4       	brge	.+16     	; 0x2ac2 <main+0x22e>
		LCD_intgerToString(Velocity);
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab6:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
		LCD_displayString(" ");
    2aba:	84 e4       	ldi	r24, 0x44	; 68
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayString>

	}



	if(UART_Data[6]=='R')
    2ac2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ac4:	82 35       	cpi	r24, 0x52	; 82
    2ac6:	41 f4       	brne	.+16     	; 0x2ad8 <main+0x244>
		{
		LCD_displayStringRowColumn(1, 1,"Direction:+");
    2ac8:	26 e4       	ldi	r18, 0x46	; 70
    2aca:	31 e0       	ldi	r19, 0x01	; 1
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>
    2ad6:	0a c0       	rjmp	.+20     	; 0x2aec <main+0x258>
		}

    else if(UART_Data[6]=='L'){
    2ad8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ada:	8c 34       	cpi	r24, 0x4C	; 76
    2adc:	39 f4       	brne	.+14     	; 0x2aec <main+0x258>
    	LCD_displayStringRowColumn(1, 1,"Direction:-");
    2ade:	22 e5       	ldi	r18, 0x52	; 82
    2ae0:	31 e0       	ldi	r19, 0x01	; 1
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	a9 01       	movw	r20, r18
    2ae8:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_displayStringRowColumn>

    }



	LCD_intgerToString(Angle);
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	0e 94 3c 12 	call	0x2478	; 0x2478 <LCD_intgerToString>
	//DisplytimeOnLCD();
	g_hour=0;
    2af4:	10 92 78 02 	sts	0x0278, r1
	g_min=0;
    2af8:	10 92 77 02 	sts	0x0277, r1
	g_sec=0;
    2afc:	10 92 76 02 	sts	0x0276, r1
	Timer1_setCallBack(Timer_ISR_StopWatch);
    2b00:	88 e6       	ldi	r24, 0x68	; 104
    2b02:	93 e1       	ldi	r25, 0x13	; 19
    2b04:	0e 94 01 0c 	call	0x1802	; 0x1802 <Timer1_setCallBack>

	UART_sendString("\r\n");
    2b08:	8e e9       	ldi	r24, 0x9E	; 158
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_sendString>
    2b10:	34 cf       	rjmp	.-408    	; 0x297a <main+0xe6>

00002b12 <__udivmodqi4>:
    2b12:	99 1b       	sub	r25, r25
    2b14:	79 e0       	ldi	r23, 0x09	; 9
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <__udivmodqi4_ep>

00002b18 <__udivmodqi4_loop>:
    2b18:	99 1f       	adc	r25, r25
    2b1a:	96 17       	cp	r25, r22
    2b1c:	08 f0       	brcs	.+2      	; 0x2b20 <__udivmodqi4_ep>
    2b1e:	96 1b       	sub	r25, r22

00002b20 <__udivmodqi4_ep>:
    2b20:	88 1f       	adc	r24, r24
    2b22:	7a 95       	dec	r23
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__udivmodqi4_loop>
    2b26:	80 95       	com	r24
    2b28:	08 95       	ret

00002b2a <__udivmodsi4>:
    2b2a:	a1 e2       	ldi	r26, 0x21	; 33
    2b2c:	1a 2e       	mov	r1, r26
    2b2e:	aa 1b       	sub	r26, r26
    2b30:	bb 1b       	sub	r27, r27
    2b32:	fd 01       	movw	r30, r26
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <__udivmodsi4_ep>

00002b36 <__udivmodsi4_loop>:
    2b36:	aa 1f       	adc	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	ee 1f       	adc	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	a2 17       	cp	r26, r18
    2b40:	b3 07       	cpc	r27, r19
    2b42:	e4 07       	cpc	r30, r20
    2b44:	f5 07       	cpc	r31, r21
    2b46:	20 f0       	brcs	.+8      	; 0x2b50 <__udivmodsi4_ep>
    2b48:	a2 1b       	sub	r26, r18
    2b4a:	b3 0b       	sbc	r27, r19
    2b4c:	e4 0b       	sbc	r30, r20
    2b4e:	f5 0b       	sbc	r31, r21

00002b50 <__udivmodsi4_ep>:
    2b50:	66 1f       	adc	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	88 1f       	adc	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	1a 94       	dec	r1
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <__udivmodsi4_loop>
    2b5c:	60 95       	com	r22
    2b5e:	70 95       	com	r23
    2b60:	80 95       	com	r24
    2b62:	90 95       	com	r25
    2b64:	9b 01       	movw	r18, r22
    2b66:	ac 01       	movw	r20, r24
    2b68:	bd 01       	movw	r22, r26
    2b6a:	cf 01       	movw	r24, r30
    2b6c:	08 95       	ret

00002b6e <__prologue_saves__>:
    2b6e:	2f 92       	push	r2
    2b70:	3f 92       	push	r3
    2b72:	4f 92       	push	r4
    2b74:	5f 92       	push	r5
    2b76:	6f 92       	push	r6
    2b78:	7f 92       	push	r7
    2b7a:	8f 92       	push	r8
    2b7c:	9f 92       	push	r9
    2b7e:	af 92       	push	r10
    2b80:	bf 92       	push	r11
    2b82:	cf 92       	push	r12
    2b84:	df 92       	push	r13
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	ca 1b       	sub	r28, r26
    2b98:	db 0b       	sbc	r29, r27
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	09 94       	ijmp

00002ba6 <__epilogue_restores__>:
    2ba6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba8:	39 88       	ldd	r3, Y+17	; 0x11
    2baa:	48 88       	ldd	r4, Y+16	; 0x10
    2bac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2bba:	c8 84       	ldd	r12, Y+8	; 0x08
    2bbc:	df 80       	ldd	r13, Y+7	; 0x07
    2bbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2bc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2bc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2bc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2bc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bca:	ce 0f       	add	r28, r30
    2bcc:	d1 1d       	adc	r29, r1
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	ed 01       	movw	r28, r26
    2bda:	08 95       	ret

00002bdc <atoi>:
    2bdc:	fc 01       	movw	r30, r24
    2bde:	88 27       	eor	r24, r24
    2be0:	99 27       	eor	r25, r25
    2be2:	e8 94       	clt
    2be4:	21 91       	ld	r18, Z+
    2be6:	20 32       	cpi	r18, 0x20	; 32
    2be8:	e9 f3       	breq	.-6      	; 0x2be4 <atoi+0x8>
    2bea:	29 30       	cpi	r18, 0x09	; 9
    2bec:	10 f0       	brcs	.+4      	; 0x2bf2 <atoi+0x16>
    2bee:	2e 30       	cpi	r18, 0x0E	; 14
    2bf0:	c8 f3       	brcs	.-14     	; 0x2be4 <atoi+0x8>
    2bf2:	2b 32       	cpi	r18, 0x2B	; 43
    2bf4:	41 f0       	breq	.+16     	; 0x2c06 <atoi+0x2a>
    2bf6:	2d 32       	cpi	r18, 0x2D	; 45
    2bf8:	39 f4       	brne	.+14     	; 0x2c08 <atoi+0x2c>
    2bfa:	68 94       	set
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <atoi+0x2a>
    2bfe:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__mulhi_const_10>
    2c02:	82 0f       	add	r24, r18
    2c04:	91 1d       	adc	r25, r1
    2c06:	21 91       	ld	r18, Z+
    2c08:	20 53       	subi	r18, 0x30	; 48
    2c0a:	2a 30       	cpi	r18, 0x0A	; 10
    2c0c:	c0 f3       	brcs	.-16     	; 0x2bfe <atoi+0x22>
    2c0e:	1e f4       	brtc	.+6      	; 0x2c16 <atoi+0x3a>
    2c10:	90 95       	com	r25
    2c12:	81 95       	neg	r24
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	08 95       	ret

00002c18 <itoa>:
    2c18:	fb 01       	movw	r30, r22
    2c1a:	9f 01       	movw	r18, r30
    2c1c:	e8 94       	clt
    2c1e:	42 30       	cpi	r20, 0x02	; 2
    2c20:	c4 f0       	brlt	.+48     	; 0x2c52 <itoa+0x3a>
    2c22:	45 32       	cpi	r20, 0x25	; 37
    2c24:	b4 f4       	brge	.+44     	; 0x2c52 <itoa+0x3a>
    2c26:	4a 30       	cpi	r20, 0x0A	; 10
    2c28:	29 f4       	brne	.+10     	; 0x2c34 <itoa+0x1c>
    2c2a:	97 fb       	bst	r25, 7
    2c2c:	1e f4       	brtc	.+6      	; 0x2c34 <itoa+0x1c>
    2c2e:	90 95       	com	r25
    2c30:	81 95       	neg	r24
    2c32:	9f 4f       	sbci	r25, 0xFF	; 255
    2c34:	64 2f       	mov	r22, r20
    2c36:	77 27       	eor	r23, r23
    2c38:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodhi4>
    2c3c:	80 5d       	subi	r24, 0xD0	; 208
    2c3e:	8a 33       	cpi	r24, 0x3A	; 58
    2c40:	0c f0       	brlt	.+2      	; 0x2c44 <itoa+0x2c>
    2c42:	89 5d       	subi	r24, 0xD9	; 217
    2c44:	81 93       	st	Z+, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	a1 f7       	brne	.-24     	; 0x2c34 <itoa+0x1c>
    2c4c:	16 f4       	brtc	.+4      	; 0x2c52 <itoa+0x3a>
    2c4e:	5d e2       	ldi	r21, 0x2D	; 45
    2c50:	51 93       	st	Z+, r21
    2c52:	10 82       	st	Z, r1
    2c54:	c9 01       	movw	r24, r18
    2c56:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <strrev>

00002c5a <__mulhi_const_10>:
    2c5a:	7a e0       	ldi	r23, 0x0A	; 10
    2c5c:	97 9f       	mul	r25, r23
    2c5e:	90 2d       	mov	r25, r0
    2c60:	87 9f       	mul	r24, r23
    2c62:	80 2d       	mov	r24, r0
    2c64:	91 0d       	add	r25, r1
    2c66:	11 24       	eor	r1, r1
    2c68:	08 95       	ret

00002c6a <strrev>:
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	67 2f       	mov	r22, r23
    2c70:	71 91       	ld	r23, Z+
    2c72:	77 23       	and	r23, r23
    2c74:	e1 f7       	brne	.-8      	; 0x2c6e <strrev+0x4>
    2c76:	32 97       	sbiw	r30, 0x02	; 2
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <strrev+0x18>
    2c7a:	7c 91       	ld	r23, X
    2c7c:	6d 93       	st	X+, r22
    2c7e:	70 83       	st	Z, r23
    2c80:	62 91       	ld	r22, -Z
    2c82:	ae 17       	cp	r26, r30
    2c84:	bf 07       	cpc	r27, r31
    2c86:	c8 f3       	brcs	.-14     	; 0x2c7a <strrev+0x10>
    2c88:	08 95       	ret

00002c8a <__udivmodhi4>:
    2c8a:	aa 1b       	sub	r26, r26
    2c8c:	bb 1b       	sub	r27, r27
    2c8e:	51 e1       	ldi	r21, 0x11	; 17
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <__udivmodhi4_ep>

00002c92 <__udivmodhi4_loop>:
    2c92:	aa 1f       	adc	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	a6 17       	cp	r26, r22
    2c98:	b7 07       	cpc	r27, r23
    2c9a:	10 f0       	brcs	.+4      	; 0x2ca0 <__udivmodhi4_ep>
    2c9c:	a6 1b       	sub	r26, r22
    2c9e:	b7 0b       	sbc	r27, r23

00002ca0 <__udivmodhi4_ep>:
    2ca0:	88 1f       	adc	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	5a 95       	dec	r21
    2ca6:	a9 f7       	brne	.-22     	; 0x2c92 <__udivmodhi4_loop>
    2ca8:	80 95       	com	r24
    2caa:	90 95       	com	r25
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	08 95       	ret

00002cb2 <_exit>:
    2cb2:	f8 94       	cli

00002cb4 <__stop_program>:
    2cb4:	ff cf       	rjmp	.-2      	; 0x2cb4 <__stop_program>
